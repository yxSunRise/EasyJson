g++ -c -std=c++11 -Wno-narrowing -w -I./ -I./jsoncpp/include   main.cpp -o main.o
In file included from main.cpp:4:
main.cpp: In member function 'bool Student::unmarshal(const Json::Value&)':
easy_json.h:297:47: error: no matching function for call to 'Unmarshal(long int&, const Json::Value&)'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:26:17: note: candidate: 'template<class T, typename std::enable_if<Json::TestUnmarshalFunc<T>::has, int>::type <anonymous> > bool Json::Unmarshal(T&, const Json::Value&)'
     inline bool Unmarshal(T& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:26:17: note:   template argument deduction/substitution failed:
easy_json.h:25:84: error: no type named 'type' in 'struct std::enable_if<false, int>'
     template <typename T,typename enable_if<TestUnmarshalFunc<T>::has,int>::type = 0>
                                                                                    ^
easy_json.h:32:17: note: candidate: 'template<class T> bool Json::Unmarshal(int&, const Json::Value&)'
     inline bool Unmarshal(int& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:32:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:40:17: note: candidate: 'template<class T> bool Json::Unmarshal(long int&, const Json::Value&)'
     inline bool Unmarshal(long& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:40:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:48:17: note: candidate: 'template<class T> bool Json::Unmarshal(bool&, const Json::Value&)'
     inline bool Unmarshal(bool& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:48:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:56:17: note: candidate: 'template<class T> bool Json::Unmarshal(float&, const Json::Value&)'
     inline bool Unmarshal(float & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:56:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:64:17: note: candidate: 'template<class T> bool Json::Unmarshal(double&, const Json::Value&)'
     inline bool Unmarshal(double & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:64:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:72:17: note: candidate: 'template<class T> bool Json::Unmarshal(std::__cxx11::string&, const Json::Value&)'
     inline bool Unmarshal(string & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:72:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:92:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::vector<T>&, const Json::Value&)'
     bool Unmarshal(vector<T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:92:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::vector<T>' and 'long int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:108:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<std::__cxx11::basic_string<char>, T>&, const Json::Value&)'
     bool Unmarshal(map<string,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:108:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<std::__cxx11::basic_string<char>, T>' and 'long int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:123:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<int, T>&, const Json::Value&)'
     bool Unmarshal(map<int,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:123:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<int, T>' and 'long int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:138:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<long int, T>&, const Json::Value&)'
     bool Unmarshal(map<long,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:138:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<long int, T>' and 'long int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:239:10: note: candidate: 'template<class T> bool Json::Unmarshal(T&, const string&)'
     bool Unmarshal(T& obj,const string &s){
          ^~~~~~~~~
easy_json.h:239:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   cannot convert '(& root)->Json::Value::operator[](((const char*)"id"))' (type 'const Json::Value') to type 'const string&' {aka 'const std::__cxx11::basic_string<char>&'}
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:267:39: note: in expansion of macro '__func_1'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:297:47: error: no matching function for call to 'Unmarshal(bool&, const Json::Value&)'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:26:17: note: candidate: 'template<class T, typename std::enable_if<Json::TestUnmarshalFunc<T>::has, int>::type <anonymous> > bool Json::Unmarshal(T&, const Json::Value&)'
     inline bool Unmarshal(T& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:26:17: note:   template argument deduction/substitution failed:
easy_json.h:25:84: error: no type named 'type' in 'struct std::enable_if<false, int>'
     template <typename T,typename enable_if<TestUnmarshalFunc<T>::has,int>::type = 0>
                                                                                    ^
easy_json.h:32:17: note: candidate: 'template<class T> bool Json::Unmarshal(int&, const Json::Value&)'
     inline bool Unmarshal(int& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:32:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:40:17: note: candidate: 'template<class T> bool Json::Unmarshal(long int&, const Json::Value&)'
     inline bool Unmarshal(long& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:40:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:48:17: note: candidate: 'template<class T> bool Json::Unmarshal(bool&, const Json::Value&)'
     inline bool Unmarshal(bool& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:48:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:56:17: note: candidate: 'template<class T> bool Json::Unmarshal(float&, const Json::Value&)'
     inline bool Unmarshal(float & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:56:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:64:17: note: candidate: 'template<class T> bool Json::Unmarshal(double&, const Json::Value&)'
     inline bool Unmarshal(double & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:64:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:72:17: note: candidate: 'template<class T> bool Json::Unmarshal(std::__cxx11::string&, const Json::Value&)'
     inline bool Unmarshal(string & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:72:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:92:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::vector<T>&, const Json::Value&)'
     bool Unmarshal(vector<T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:92:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::vector<T>' and 'bool'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:108:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<std::__cxx11::basic_string<char>, T>&, const Json::Value&)'
     bool Unmarshal(map<string,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:108:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<std::__cxx11::basic_string<char>, T>' and 'bool'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:123:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<int, T>&, const Json::Value&)'
     bool Unmarshal(map<int,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:123:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<int, T>' and 'bool'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:138:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<long int, T>&, const Json::Value&)'
     bool Unmarshal(map<long,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:138:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<long int, T>' and 'bool'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:239:10: note: candidate: 'template<class T> bool Json::Unmarshal(T&, const string&)'
     bool Unmarshal(T& obj,const string &s){
          ^~~~~~~~~
easy_json.h:239:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   cannot convert '(& root)->Json::Value::operator[](((const char*)"sex"))' (type 'const Json::Value') to type 'const string&' {aka 'const std::__cxx11::basic_string<char>&'}
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:297:47: error: no matching function for call to 'Unmarshal(double&, const Json::Value&)'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:26:17: note: candidate: 'template<class T, typename std::enable_if<Json::TestUnmarshalFunc<T>::has, int>::type <anonymous> > bool Json::Unmarshal(T&, const Json::Value&)'
     inline bool Unmarshal(T& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:26:17: note:   template argument deduction/substitution failed:
easy_json.h:25:84: error: no type named 'type' in 'struct std::enable_if<false, int>'
     template <typename T,typename enable_if<TestUnmarshalFunc<T>::has,int>::type = 0>
                                                                                    ^
easy_json.h:32:17: note: candidate: 'template<class T> bool Json::Unmarshal(int&, const Json::Value&)'
     inline bool Unmarshal(int& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:32:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:40:17: note: candidate: 'template<class T> bool Json::Unmarshal(long int&, const Json::Value&)'
     inline bool Unmarshal(long& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:40:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:48:17: note: candidate: 'template<class T> bool Json::Unmarshal(bool&, const Json::Value&)'
     inline bool Unmarshal(bool& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:48:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:56:17: note: candidate: 'template<class T> bool Json::Unmarshal(float&, const Json::Value&)'
     inline bool Unmarshal(float & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:56:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:64:17: note: candidate: 'template<class T> bool Json::Unmarshal(double&, const Json::Value&)'
     inline bool Unmarshal(double & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:64:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:72:17: note: candidate: 'template<class T> bool Json::Unmarshal(std::__cxx11::string&, const Json::Value&)'
     inline bool Unmarshal(string & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:72:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:92:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::vector<T>&, const Json::Value&)'
     bool Unmarshal(vector<T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:92:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::vector<T>' and 'double'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:108:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<std::__cxx11::basic_string<char>, T>&, const Json::Value&)'
     bool Unmarshal(map<string,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:108:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<std::__cxx11::basic_string<char>, T>' and 'double'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:123:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<int, T>&, const Json::Value&)'
     bool Unmarshal(map<int,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:123:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<int, T>' and 'double'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:138:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<long int, T>&, const Json::Value&)'
     bool Unmarshal(map<long,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:138:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<long int, T>' and 'double'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:239:10: note: candidate: 'template<class T> bool Json::Unmarshal(T&, const string&)'
     bool Unmarshal(T& obj,const string &s){
          ^~~~~~~~~
easy_json.h:239:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   cannot convert '(& root)->Json::Value::operator[](((const char*)"score"))' (type 'const Json::Value') to type 'const string&' {aka 'const std::__cxx11::basic_string<char>&'}
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:297:47: error: no matching function for call to 'Unmarshal(std::__cxx11::string&, const Json::Value&)'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:26:17: note: candidate: 'template<class T, typename std::enable_if<Json::TestUnmarshalFunc<T>::has, int>::type <anonymous> > bool Json::Unmarshal(T&, const Json::Value&)'
     inline bool Unmarshal(T& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:26:17: note:   template argument deduction/substitution failed:
easy_json.h:25:84: error: no type named 'type' in 'struct std::enable_if<false, int>'
     template <typename T,typename enable_if<TestUnmarshalFunc<T>::has,int>::type = 0>
                                                                                    ^
easy_json.h:32:17: note: candidate: 'template<class T> bool Json::Unmarshal(int&, const Json::Value&)'
     inline bool Unmarshal(int& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:32:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:40:17: note: candidate: 'template<class T> bool Json::Unmarshal(long int&, const Json::Value&)'
     inline bool Unmarshal(long& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:40:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:48:17: note: candidate: 'template<class T> bool Json::Unmarshal(bool&, const Json::Value&)'
     inline bool Unmarshal(bool& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:48:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:56:17: note: candidate: 'template<class T> bool Json::Unmarshal(float&, const Json::Value&)'
     inline bool Unmarshal(float & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:56:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:64:17: note: candidate: 'template<class T> bool Json::Unmarshal(double&, const Json::Value&)'
     inline bool Unmarshal(double & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:64:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:72:17: note: candidate: 'template<class T> bool Json::Unmarshal(std::__cxx11::string&, const Json::Value&)'
     inline bool Unmarshal(string & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:72:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:92:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::vector<T>&, const Json::Value&)'
     bool Unmarshal(vector<T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:92:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::vector<T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:108:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<std::__cxx11::basic_string<char>, T>&, const Json::Value&)'
     bool Unmarshal(map<string,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:108:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::map<std::__cxx11::basic_string<char>, T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:123:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<int, T>&, const Json::Value&)'
     bool Unmarshal(map<int,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:123:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::map<int, T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:138:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<long int, T>&, const Json::Value&)'
     bool Unmarshal(map<long,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:138:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::map<long int, T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
easy_json.h:239:10: note: candidate: 'template<class T> bool Json::Unmarshal(T&, const string&)'
     bool Unmarshal(T& obj,const string &s){
          ^~~~~~~~~
easy_json.h:239:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   cannot convert '(& root)->Json::Value::operator[](((const char*)"name"))' (type 'const Json::Value') to type 'const string&' {aka 'const std::__cxx11::basic_string<char>&'}
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:65: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:267:65: note: in expansion of macro '__func_3'
 #define __func_4(func,member,...)     __func_1(func,member)     __func_3(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_4'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:13:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(id,sex,score,name)
     ^~~~~~~~~
main.cpp: In member function 'bool Teacher::unmarshal(const Json::Value&)':
easy_json.h:297:47: error: no matching function for call to 'Unmarshal(std::__cxx11::string&, const Json::Value&)'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:26:17: note: candidate: 'template<class T, typename std::enable_if<Json::TestUnmarshalFunc<T>::has, int>::type <anonymous> > bool Json::Unmarshal(T&, const Json::Value&)'
     inline bool Unmarshal(T& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:26:17: note:   template argument deduction/substitution failed:
easy_json.h:25:84: error: no type named 'type' in 'struct std::enable_if<false, int>'
     template <typename T,typename enable_if<TestUnmarshalFunc<T>::has,int>::type = 0>
                                                                                    ^
easy_json.h:32:17: note: candidate: 'template<class T> bool Json::Unmarshal(int&, const Json::Value&)'
     inline bool Unmarshal(int& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:32:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:40:17: note: candidate: 'template<class T> bool Json::Unmarshal(long int&, const Json::Value&)'
     inline bool Unmarshal(long& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:40:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:48:17: note: candidate: 'template<class T> bool Json::Unmarshal(bool&, const Json::Value&)'
     inline bool Unmarshal(bool& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:48:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:56:17: note: candidate: 'template<class T> bool Json::Unmarshal(float&, const Json::Value&)'
     inline bool Unmarshal(float & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:56:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:64:17: note: candidate: 'template<class T> bool Json::Unmarshal(double&, const Json::Value&)'
     inline bool Unmarshal(double & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:64:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:72:17: note: candidate: 'template<class T> bool Json::Unmarshal(std::__cxx11::string&, const Json::Value&)'
     inline bool Unmarshal(string & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:72:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:92:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::vector<T>&, const Json::Value&)'
     bool Unmarshal(vector<T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:92:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::vector<T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:108:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<std::__cxx11::basic_string<char>, T>&, const Json::Value&)'
     bool Unmarshal(map<string,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:108:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::map<std::__cxx11::basic_string<char>, T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:123:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<int, T>&, const Json::Value&)'
     bool Unmarshal(map<int,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:123:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::map<int, T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:138:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<long int, T>&, const Json::Value&)'
     bool Unmarshal(map<long,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:138:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   'std::__cxx11::string' {aka 'std::__cxx11::basic_string<char>'} is not derived from 'std::map<long int, T>'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:239:10: note: candidate: 'template<class T> bool Json::Unmarshal(T&, const string&)'
     bool Unmarshal(T& obj,const string &s){
          ^~~~~~~~~
easy_json.h:239:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   cannot convert '(& root)->Json::Value::operator[](((const char*)"name"))' (type 'const Json::Value') to type 'const string&' {aka 'const std::__cxx11::basic_string<char>&'}
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:266:39: note: in expansion of macro '__func_1'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:297:47: error: no matching function for call to 'Unmarshal(int&, const Json::Value&)'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:26:17: note: candidate: 'template<class T, typename std::enable_if<Json::TestUnmarshalFunc<T>::has, int>::type <anonymous> > bool Json::Unmarshal(T&, const Json::Value&)'
     inline bool Unmarshal(T& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:26:17: note:   template argument deduction/substitution failed:
easy_json.h:25:84: error: no type named 'type' in 'struct std::enable_if<false, int>'
     template <typename T,typename enable_if<TestUnmarshalFunc<T>::has,int>::type = 0>
                                                                                    ^
easy_json.h:32:17: note: candidate: 'template<class T> bool Json::Unmarshal(int&, const Json::Value&)'
     inline bool Unmarshal(int& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:32:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:40:17: note: candidate: 'template<class T> bool Json::Unmarshal(long int&, const Json::Value&)'
     inline bool Unmarshal(long& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:40:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:48:17: note: candidate: 'template<class T> bool Json::Unmarshal(bool&, const Json::Value&)'
     inline bool Unmarshal(bool& obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:48:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:56:17: note: candidate: 'template<class T> bool Json::Unmarshal(float&, const Json::Value&)'
     inline bool Unmarshal(float & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:56:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:64:17: note: candidate: 'template<class T> bool Json::Unmarshal(double&, const Json::Value&)'
     inline bool Unmarshal(double & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:64:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
In file included from main.cpp:4:
easy_json.h:72:17: note: candidate: 'template<class T> bool Json::Unmarshal(std::__cxx11::string&, const Json::Value&)'
     inline bool Unmarshal(string & obj,const Json::Value &root){
                 ^~~~~~~~~
easy_json.h:72:17: note:   template argument deduction/substitution failed:
In file included from main.cpp:4:
easy_json.h:297:47: note:   couldn't deduce template parameter 'T'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:92:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::vector<T>&, const Json::Value&)'
     bool Unmarshal(vector<T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:92:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::vector<T>' and 'int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:108:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<std::__cxx11::basic_string<char>, T>&, const Json::Value&)'
     bool Unmarshal(map<string,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:108:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<std::__cxx11::basic_string<char>, T>' and 'int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:123:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<int, T>&, const Json::Value&)'
     bool Unmarshal(map<int,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:123:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<int, T>' and 'int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:138:10: note: candidate: 'template<class T> bool Json::Unmarshal(std::map<long int, T>&, const Json::Value&)'
     bool Unmarshal(map<long,T>& obj,const Json::Value& root){
          ^~~~~~~~~
easy_json.h:138:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   mismatched types 'std::map<long int, T>' and 'int'
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
easy_json.h:239:10: note: candidate: 'template<class T> bool Json::Unmarshal(T&, const string&)'
     bool Unmarshal(T& obj,const string &s){
          ^~~~~~~~~
easy_json.h:239:10: note:   template argument deduction/substitution failed:
easy_json.h:297:47: note:   cannot convert '(& root)->Json::Value::operator[](((const char*)"subject"))' (type 'const Json::Value') to type 'const string&' {aka 'const std::__cxx11::basic_string<char>&'}
         if(!Json::Unmarshal(field,root[#field])){   \
                                               ^
easy_json.h:264:33: note: in expansion of macro '__unmarshal_obj_each_field__'
 #define __func_1(func,member)   func(member);
                                 ^~~~
easy_json.h:265:39: note: in expansion of macro '__func_1'
 #define __func_2(func,member,...)     __func_1(func,member)     __func_1(func,__VA_ARGS__)
                                       ^~~~~~~~
easy_json.h:266:65: note: in expansion of macro '__func_2'
 #define __func_3(func,member,...)     __func_1(func,member)     __func_2(func,__VA_ARGS__)
                                                                 ^~~~~~~~
easy_json.h:261:29: note: in expansion of macro '__func_3'
 #define __macro_cat__(a,b)  a##b
                             ^
easy_json.h:293:9: note: in expansion of macro 'FOR_EACH'
         FOR_EACH(__unmarshal_obj_each_field__,__VA_ARGS__)  \
         ^~~~~~~~
easy_json.h:311:5: note: in expansion of macro 'UNMARSHAL_OBJ'
     UNMARSHAL_OBJ(__VA_ARGS__)  \
     ^~~~~~~~~~~~~
main.cpp:20:5: note: in expansion of macro 'JSON_HELP'
     JSON_HELP(name,subject,stus)
     ^~~~~~~~~
make: *** [main.o] Error 1
